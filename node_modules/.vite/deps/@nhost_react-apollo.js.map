{
  "version": 3,
  "sources": ["../../@apollo/src/link/context/index.ts", "../../@apollo/src/link/subscriptions/index.ts", "../../graphql-ws/lib/utils.mjs", "../../graphql-ws/lib/common.mjs", "../../graphql-ws/lib/client.mjs", "../../@nhost/apollo/src/ws.ts", "../../@nhost/apollo/src/index.ts", "../../@nhost/react-apollo/src/hooks.tsx", "../../@nhost/react-apollo/src/provider.tsx"],
  "sourcesContent": ["import type { Operation, GraphQLRequest, NextLink } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport type { ObservableSubscription } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type { DefaultContext } from \"../../core/index.js\";\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: DefaultContext\n) => Promise<DefaultContext> | DefaultContext;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable((observer) => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then((req) => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n", "// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { print } from \"../../utilities/index.js\";\nimport type { Client, Sink } from \"graphql-ws\";\n\nimport type { Operation, FetchResult } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type { FormattedExecutionResult } from \"graphql\";\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event\nfunction isLikeCloseEvent(val: unknown): val is CloseEvent {\n  return isNonNullObject(val) && \"code\" in val && \"reason\" in val;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\nfunction isLikeErrorEvent(err: unknown): err is Event {\n  return isNonNullObject(err) && err.target?.readyState === WebSocket.CLOSED;\n}\n\nexport class GraphQLWsLink extends ApolloLink {\n  constructor(public readonly client: Client) {\n    super();\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable((observer) => {\n      return this.client.subscribe<FetchResult>(\n        { ...operation, query: print(operation.query) },\n        {\n          next: observer.next.bind(observer),\n          complete: observer.complete.bind(observer),\n          error: (err) => {\n            if (err instanceof Error) {\n              return observer.error(err);\n            }\n            const likeClose = isLikeCloseEvent(err);\n            if (likeClose || isLikeErrorEvent(err)) {\n              return observer.error(\n                // reason will be available on clean closes\n                new Error(\n                  `Socket closed${likeClose ? ` with event ${err.code}` : \"\"}${\n                    likeClose ? ` ${err.reason}` : \"\"\n                  }`\n                )\n              );\n            }\n\n            return observer.error(\n              new ApolloError({\n                graphQLErrors: Array.isArray(err) ? err : [err],\n              })\n            );\n          },\n          // casting around a wrong type in graphql-ws, which incorrectly expects `Sink<ExecutionResult>`\n        } satisfies Sink<FormattedExecutionResult> as any\n      );\n    });\n  }\n}\n", "/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n/** @private */\nexport function isAsyncGenerator(val) {\n    return (isObject(val) &&\n        typeof Object(val)[Symbol.asyncIterator] === 'function' &&\n        typeof val.return === 'function'\n    // for lazy ones, we only need the return anyway\n    // typeof val.throw === 'function' &&\n    // typeof val.next === 'function'\n    );\n}\n/** @private */\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        // must be at least one error\n        obj.length > 0 &&\n        // error has at least a message\n        obj.every((ob) => 'message' in ob));\n}\n/**\n * Limits the WebSocket close event reason to not exceed a length of one frame.\n * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.\n *\n * @private\n */\nexport function limitCloseReason(reason, whenTooLong) {\n    return reason.length < 124 ? reason : whenTooLong;\n}\n", "/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if (val.payload != null && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n", "/**\n *\n * client\n *\n */\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { CloseCode, GRAPHQL_TRANSPORT_WS_PROTOCOL, MessageType, parseMessage, stringifyMessage, } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        // clear the lazy close timeout immediatelly so that close gets debounced\n        // see: https://github.com/enisdenjo/graphql-ws/issues/388\n        clearTimeout(lazyCloseTimeout);\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting', retrying);\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (errOrEvent instanceof TerminatedCloseEvent) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload, retrying); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete if the socket is still open.\n                            lazyCloseTimeout = setTimeout(() => {\n                                if (socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeoutMs);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    function subscribe(payload, sink) {\n        const id = generateID(payload);\n        let done = false, errored = false, releaser = () => {\n            // for handling completions before connect\n            locks--;\n            done = true;\n        };\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                    // if done while waiting for connect, release the connection lock right away\n                    if (done)\n                        return release();\n                    const unlisten = emitter.onMessage(id, (message) => {\n                        switch (message.type) {\n                            case MessageType.Next: {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type\n                                sink.next(message.payload);\n                                return;\n                            }\n                            case MessageType.Error: {\n                                (errored = true), (done = true);\n                                sink.error(message.payload);\n                                releaser();\n                                return;\n                            }\n                            case MessageType.Complete: {\n                                done = true;\n                                releaser(); // release completes the sink\n                                return;\n                            }\n                        }\n                    });\n                    socket.send(stringifyMessage({\n                        id,\n                        type: MessageType.Subscribe,\n                        payload,\n                    }, replacer));\n                    releaser = () => {\n                        if (!done && socket.readyState === WebSocketImpl.OPEN)\n                            // if not completed already and socket is open, send complete message to server on release\n                            socket.send(stringifyMessage({\n                                id,\n                                type: MessageType.Complete,\n                            }, replacer));\n                        locks--;\n                        done = true;\n                        release();\n                    };\n                    // either the releaser will be called, connection completed and\n                    // the promise resolved or the socket closed and the promise rejected.\n                    // whatever happens though, we want to stop listening for messages\n                    await waitForReleaseOrThrowOnClose.finally(unlisten);\n                    return; // completed, shouldnt try again\n                }\n                catch (errOrCloseEvent) {\n                    if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                        return;\n                }\n            }\n        })()\n            .then(() => {\n            // delivering either an error or a complete terminates the sequence\n            if (!errored)\n                sink.complete();\n        }) // resolves on release or normal closure\n            .catch((err) => {\n            sink.error(err);\n        }); // rejects on close events and errors\n        return () => {\n            // dispose only of active subscriptions\n            if (!done)\n                releaser();\n        };\n    }\n    return {\n        on: emitter.on,\n        subscribe,\n        iterate(request) {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            const dispose = subscribe(request, {\n                next(val) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type\n                    pending.push(val);\n                    deferred.resolve();\n                },\n                error(err) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                },\n                complete() {\n                    deferred.done = true;\n                    deferred.resolve();\n                },\n            });\n            const iterator = (function iterator() {\n                return __asyncGenerator(this, arguments, function* iterator_1() {\n                    for (;;) {\n                        if (!pending.length) {\n                            // only wait if there are no pending messages available\n                            yield __await(new Promise((resolve) => (deferred.resolve = resolve)));\n                        }\n                        // first flush\n                        while (pending.length) {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            yield yield __await(pending.shift());\n                        }\n                        // then error\n                        if (deferred.error) {\n                            throw deferred.error;\n                        }\n                        // or complete\n                        if (deferred.done) {\n                            return yield __await(void 0);\n                        }\n                    }\n                });\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                dispose();\n                return { done: true, value: undefined };\n            };\n            return iterator;\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', new TerminatedCloseEvent());\n            }\n        },\n    };\n}\n/**\n * A synthetic close event `4499: Terminated` is issued to the current to immediately\n * close the connection without waiting for the one coming from `WebSocket.onclose`.\n *\n * Terminating is not considered fatal and a connection retry will occur as expected.\n *\n * Useful in cases where the WebSocket is stuck and not emitting any events;\n * can happen on iOS Safari, see: https://github.com/enisdenjo/graphql-ws/discussions/290.\n */\nexport class TerminatedCloseEvent extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'TerminatedCloseEvent';\n        this.message = '4499: Terminated';\n        this.code = 4499;\n        this.reason = 'Terminated';\n        this.wasClean = false;\n    }\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000, // Normal Closure is not an erroneous close code\n        1001, // Going Away\n        1006, // Abnormal Closure\n        1005, // No Status Received\n        1012, // Service Restart\n        1013, // Try Again Later\n        1014, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n", "// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  isOpen(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n\n  let connectionOpen = false\n  let socket: WebSocket\n  let timedOut: NodeJS.Timeout\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      error: (error) => {\n        console.error(error)\n        options.on?.error?.(error)\n\n        restart()\n      },\n      ping: (received) => {\n        if (!received /* sent */) {\n          timedOut = setTimeout(() => {\n            // a close event `4499: Terminated` is issued to the current WebSocket and an\n            // artificial `{ code: 4499, reason: 'Terminated', wasClean: false }` close-event-like\n            // object is immediately emitted without waiting for the one coming from `WebSocket.onclose`\n            //\n            // calling terminate is not considered fatal and a connection retry will occur as expected\n            //\n            // see: https://github.com/enisdenjo/graphql-ws/discussions/290\n            client.terminate()\n            restart()\n          }, 5_000)\n        }\n      },\n      pong: (received) => {\n        if (received) {\n          clearTimeout(timedOut)\n        }\n      },\n      opened: (originalSocket) => {\n        socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n        connectionOpen = true\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      },\n      closed: (event) => {\n        options?.on?.closed?.(event)\n        connectionOpen = false\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    isOpen: () => connectionOpen\n  }\n}\n", "import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { AuthContext, NhostClient } from '@nhost/nhost-js'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  onError?: RequestHandler\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  link?: ApolloLink\n  generateLinks?: (links: (ApolloLink | RequestHandler)[]) => (ApolloLink | RequestHandler)[]\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError,\n  link: customLink,\n  generateLinks\n}: NhostApolloClientOptions) => {\n  const backendUrl = graphqlUrl || nhost?.graphql.httpUrl\n\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n\n  const uri = backendUrl\n  const interpreter = nhost?.auth.client.interpreter\n\n  let accessToken: AuthContext['accessToken'] | null = null\n\n  const isTokenValid = () =>\n    !!accessToken?.value && !!accessToken?.expiresAt && accessToken?.expiresAt > new Date()\n\n  const isTokenValidOrNull = () => !accessToken || isTokenValid()\n\n  const awaitValidTokenOrNull = () => {\n    if (isTokenValidOrNull()) {\n      return\n    }\n\n    return new Promise((resolve) => {\n      // doing this as an interval to avoid race conditions.\n      const interval = setInterval(() => {\n        if (isTokenValidOrNull()) {\n          clearInterval(interval)\n          resolve(true)\n        }\n      }, 100)\n    })\n  }\n\n  const getAuthHeaders = async () => {\n    // wait for valid access token\n    await awaitValidTokenOrNull()\n\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (accessToken) {\n      resHeaders.authorization = `Bearer ${accessToken.value}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const wsClient = isBrowser\n    ? createRestartableClient({\n        url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n        shouldRetry: () => true,\n        retryAttempts: 100,\n        retryWait: async (retries) => {\n          // start with 1 second delay\n          const baseDelay = 1000\n\n          // max 3 seconds of jitter\n          const maxJitter = 3000\n\n          // exponential backoff with jitter\n          return new Promise((resolve) =>\n            setTimeout(\n              resolve,\n              baseDelay * Math.pow(2, retries) + Math.floor(Math.random() * maxJitter)\n            )\n          )\n        },\n        connectionParams: async () => ({\n          headers: {\n            ...headers,\n            ...(await getAuthHeaders())\n          }\n        })\n      })\n    : null\n\n  const wsLink = wsClient ? new GraphQLWsLink(wsClient) : null\n\n  const httpLink = setContext(async (_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...(await getAuthHeaders())\n      }\n    }\n  }).concat(createHttpLink({ uri }))\n\n  const splitLink = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const links = []\n\n  if (onError) {\n    links.push(onError)\n  }\n\n  if (customLink) {\n    links.push(customLink)\n  }\n\n  links.push(splitLink)\n\n  const link = from(generateLinks ? generateLinks(links) : links)\n\n  const client = new ApolloClient({\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools,\n    link\n  })\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      if (\n        event.type === 'SIGNOUT' ||\n        (event.type === 'TOKEN_CHANGED' && state.context.accessToken.value === null)\n      ) {\n        accessToken = null\n\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n\n        return\n      }\n\n      // update token\n      accessToken = state.context.accessToken\n\n      if (!isBrowser || !wsClient?.isOpen()) {\n        return\n      }\n\n      wsClient?.restart()\n    }\n  })\n\n  return client\n}\n", "import {\n  DocumentNode,\n  OperationVariables,\n  QueryHookOptions,\n  SubscriptionHookOptions,\n  TypedDocumentNode,\n  useQuery,\n  useSubscription\n} from '@apollo/client'\nimport { useAuthenticated } from '@nhost/react'\n\nexport function useAuthQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions = { ...options, skip: options?.skip || !isAuthenticated }\n  return useQuery(query, newOptions)\n}\n\nexport function useAuthSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions: SubscriptionHookOptions<TData, TVariables> = {\n    ...options,\n    skip: options?.skip || !isAuthenticated\n  }\n\n  return useSubscription(subscription, newOptions)\n}\n\n// TODO consider other hooks\n/*\n- useAuthLazyQuery\n- useAuthMutation\n- useRoleQuery\n- useRoleLazyQuery\n- useRoleMutation\n- useRoleSubscription\n*/\n", "import React, { PropsWithChildren, useEffect, useState } from 'react'\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { createApolloClient, NhostApolloClientOptions } from '@nhost/apollo'\n\n// This is needed because ApolloProvider can't be rendered without a client. To be able to render\n// the children without our client, we need an ApolloProvider because of potential underlying\n// useQuery hooks in customer applications. This way ApolloProvider and children can be rendered.\nconst mockApolloClient = new ApolloClient({ cache: new InMemoryCache() })\n\nexport const NhostApolloProvider: React.FC<PropsWithChildren<NhostApolloClientOptions>> = ({\n  children,\n  ...options\n}) => {\n  // * See https://github.com/nhost/nhost/pull/214#pullrequestreview-889730478\n  const [client, setClient] = useState<ReturnType<typeof createApolloClient>>()\n\n  // Note: Because we're using XState under the hood, we need to make sure to start the interpreter\n  // on the client side when the component is mounted. This is why we're using `useState` and\n  // `useEffect`.\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options))\n    }\n  }, [client, options])\n\n  return <ApolloProvider client={client || mockApolloClient}>{children}</ApolloProvider>\n}\n"],
  "mappings": "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",
  "names": ["GraphQLWsLink", "CloseCode", "MessageType", "a", "retries", "isLikeCloseEvent", "listeners", "message", "socket", "errOrCloseEvent", "subscribe", "iterator", "createRestartableClient", "options", "restartRequested", "restart", "connectionOpen", "socket", "timedOut", "client", "createClient", "error", "_b", "_a", "received", "originalSocket", "event", "isBrowser", "createApolloClient", "nhost", "graphqlUrl", "headers", "publicRole", "fetchPolicy", "cache", "InMemoryCache", "connectToDevTools", "onError", "customLink", "generateLinks", "backendUrl", "uri", "interpreter", "accessToken", "isTokenValid", "isTokenValidOrNull", "awaitValidTokenOrNull", "resolve", "interval", "getAuthHeaders", "resHeaders", "wsClient", "retries", "wsLink", "GraphQLWsLink", "httpLink", "setContext", "_", "createHttpLink", "splitLink", "split", "query", "mainDefinition", "getMainDefinition", "kind", "operation", "links", "link", "from", "ApolloClient", "state", "useAuthQuery", "query", "options", "isAuthenticated", "useAuthenticated", "newOptions", "useQuery", "useAuthSubscription", "subscription", "useSubscription", "mockApolloClient", "ApolloClient", "InMemoryCache", "NhostApolloProvider", "children", "client", "setClient", "useState", "useEffect", "createApolloClient", "React", "ApolloProvider"]
}
