"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const p=require("@apollo/client/core"),x=require("@apollo/client/link/context"),I=require("@apollo/client/link/subscriptions"),M=require("@apollo/client/utilities"),G=require("graphql-ws");function P(t){let c=!1,a=()=>{c=!0},d=!1,u,h;const y=G.createClient({...t,on:{...t.on,error:n=>{var e,l;console.error(n),(l=(e=t.on)==null?void 0:e.error)==null||l.call(e,n),a()},ping:n=>{n||(h=setTimeout(()=>{y.terminate(),a()},5e3))},pong:n=>{n&&clearTimeout(h)},opened:n=>{var e,l;u=n,(l=(e=t.on)==null?void 0:e.opened)==null||l.call(e,u),d=!0,a=()=>{u.readyState===WebSocket.OPEN?u.close(4205,"Client Restart"):c=!0},c&&(c=!1,a())},closed:n=>{var e,l;(l=(e=t==null?void 0:t.on)==null?void 0:e.closed)==null||l.call(e,n),d=!1}}});return{...y,restart:()=>a(),isOpen:()=>d}}const b=typeof window!="undefined",W=({nhost:t,graphqlUrl:c,headers:a={},publicRole:d="public",fetchPolicy:u,cache:h=new p.InMemoryCache,connectToDevTools:y=b&&process.env.NODE_ENV==="development",onError:n,link:e,generateLinks:l})=>{const k=c||(t==null?void 0:t.graphql.httpUrl);if(!k)throw Error("Can't initialize the Apollo Client: no backend Url has been provided");const w=k,N=t==null?void 0:t.auth.client.interpreter;let r=null;const q=()=>!!(r!=null&&r.value)&&!!(r!=null&&r.expiresAt)&&(r==null?void 0:r.expiresAt)>new Date,A=()=>!r||q(),E=()=>{if(!A())return new Promise(i=>{const o=setInterval(()=>{A()&&(clearInterval(o),i(!0))},100)})},C=async()=>{await E();const i={...a,"Sec-WebSocket-Protocol":"graphql-ws"};return r?i.authorization=`Bearer ${r.value}`:i.role=d,i},s=b?P({url:w.startsWith("https")?w.replace(/^https/,"wss"):w.replace(/^http/,"ws"),shouldRetry:()=>!0,retryAttempts:100,retryWait:async i=>new Promise(O=>setTimeout(O,1e3*Math.pow(2,i)+Math.floor(Math.random()*3e3))),connectionParams:async()=>({headers:{...a,...await C()}})}):null,D=s?new I.GraphQLWsLink(s):null,S=x.setContext(async(i,{headers:o})=>({headers:{...o,...await C()}})).concat(p.createHttpLink({uri:w})),T=D?p.split(({query:i})=>{const o=M.getMainDefinition(i),{kind:m}=o;let O;return"operation"in o&&(O=o.operation),m==="OperationDefinition"&&O==="subscription"},D,S):S,f=[];n&&f.push(n),e&&f.push(e),f.push(T);const v=p.from(l?l(f):f),g=new p.ApolloClient({cache:h||new p.InMemoryCache,ssrMode:!b,defaultOptions:{watchQuery:{fetchPolicy:u}},connectToDevTools:y,link:v});return N==null||N.onTransition(async(i,o)=>{if(["SIGNOUT","SIGNED_IN","TOKEN_CHANGED"].includes(o.type)){if(o.type==="SIGNOUT"||o.type==="TOKEN_CHANGED"&&i.context.accessToken.value===null){r=null;try{await g.resetStore()}catch(m){console.error("Error resetting Apollo client cache"),console.error(m)}return}if(r=i.context.accessToken,!b||!(s!=null&&s.isOpen()))return;s==null||s.restart()}}),g};exports.createApolloClient=W;
//# sourceMappingURL=index.cjs.js.map
