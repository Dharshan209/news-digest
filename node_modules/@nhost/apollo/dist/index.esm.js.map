{"version":3,"file":"index.esm.js","sources":["../src/ws.ts","../src/index.ts"],"sourcesContent":["// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  isOpen(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n\n  let connectionOpen = false\n  let socket: WebSocket\n  let timedOut: NodeJS.Timeout\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      error: (error) => {\n        console.error(error)\n        options.on?.error?.(error)\n\n        restart()\n      },\n      ping: (received) => {\n        if (!received /* sent */) {\n          timedOut = setTimeout(() => {\n            // a close event `4499: Terminated` is issued to the current WebSocket and an\n            // artificial `{ code: 4499, reason: 'Terminated', wasClean: false }` close-event-like\n            // object is immediately emitted without waiting for the one coming from `WebSocket.onclose`\n            //\n            // calling terminate is not considered fatal and a connection retry will occur as expected\n            //\n            // see: https://github.com/enisdenjo/graphql-ws/discussions/290\n            client.terminate()\n            restart()\n          }, 5_000)\n        }\n      },\n      pong: (received) => {\n        if (received) {\n          clearTimeout(timedOut)\n        }\n      },\n      opened: (originalSocket) => {\n        socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n        connectionOpen = true\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      },\n      closed: (event) => {\n        options?.on?.closed?.(event)\n        connectionOpen = false\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    isOpen: () => connectionOpen\n  }\n}\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { AuthContext, NhostClient } from '@nhost/nhost-js'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  onError?: RequestHandler\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  link?: ApolloLink\n  generateLinks?: (links: (ApolloLink | RequestHandler)[]) => (ApolloLink | RequestHandler)[]\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError,\n  link: customLink,\n  generateLinks\n}: NhostApolloClientOptions) => {\n  const backendUrl = graphqlUrl || nhost?.graphql.httpUrl\n\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n\n  const uri = backendUrl\n  const interpreter = nhost?.auth.client.interpreter\n\n  let accessToken: AuthContext['accessToken'] | null = null\n\n  const isTokenValid = () =>\n    !!accessToken?.value && !!accessToken?.expiresAt && accessToken?.expiresAt > new Date()\n\n  const isTokenValidOrNull = () => !accessToken || isTokenValid()\n\n  const awaitValidTokenOrNull = () => {\n    if (isTokenValidOrNull()) {\n      return\n    }\n\n    return new Promise((resolve) => {\n      // doing this as an interval to avoid race conditions.\n      const interval = setInterval(() => {\n        if (isTokenValidOrNull()) {\n          clearInterval(interval)\n          resolve(true)\n        }\n      }, 100)\n    })\n  }\n\n  const getAuthHeaders = async () => {\n    // wait for valid access token\n    await awaitValidTokenOrNull()\n\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (accessToken) {\n      resHeaders.authorization = `Bearer ${accessToken.value}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const wsClient = isBrowser\n    ? createRestartableClient({\n        url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n        shouldRetry: () => true,\n        retryAttempts: 100,\n        retryWait: async (retries) => {\n          // start with 1 second delay\n          const baseDelay = 1000\n\n          // max 3 seconds of jitter\n          const maxJitter = 3000\n\n          // exponential backoff with jitter\n          return new Promise((resolve) =>\n            setTimeout(\n              resolve,\n              baseDelay * Math.pow(2, retries) + Math.floor(Math.random() * maxJitter)\n            )\n          )\n        },\n        connectionParams: async () => ({\n          headers: {\n            ...headers,\n            ...(await getAuthHeaders())\n          }\n        })\n      })\n    : null\n\n  const wsLink = wsClient ? new GraphQLWsLink(wsClient) : null\n\n  const httpLink = setContext(async (_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...(await getAuthHeaders())\n      }\n    }\n  }).concat(createHttpLink({ uri }))\n\n  const splitLink = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const links = []\n\n  if (onError) {\n    links.push(onError)\n  }\n\n  if (customLink) {\n    links.push(customLink)\n  }\n\n  links.push(splitLink)\n\n  const link = from(generateLinks ? generateLinks(links) : links)\n\n  const client = new ApolloClient({\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools,\n    link\n  })\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      if (\n        event.type === 'SIGNOUT' ||\n        (event.type === 'TOKEN_CHANGED' && state.context.accessToken.value === null)\n      ) {\n        accessToken = null\n\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n\n        return\n      }\n\n      // update token\n      accessToken = state.context.accessToken\n\n      if (!isBrowser || !wsClient?.isOpen()) {\n        return\n      }\n\n      wsClient?.restart()\n    }\n  })\n\n  return client\n}\n"],"names":["createRestartableClient","options","restartRequested","restart","connectionOpen","socket","timedOut","client","createClient","error","_b","_a","received","originalSocket","event","isBrowser","createApolloClient","nhost","graphqlUrl","headers","publicRole","fetchPolicy","cache","InMemoryCache","connectToDevTools","onError","customLink","generateLinks","backendUrl","uri","interpreter","accessToken","isTokenValid","isTokenValidOrNull","awaitValidTokenOrNull","resolve","interval","getAuthHeaders","resHeaders","wsClient","retries","wsLink","GraphQLWsLink","httpLink","setContext","_","createHttpLink","splitLink","split","query","mainDefinition","getMainDefinition","kind","operation","links","link","from","ApolloClient","state"],"mappings":"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"}